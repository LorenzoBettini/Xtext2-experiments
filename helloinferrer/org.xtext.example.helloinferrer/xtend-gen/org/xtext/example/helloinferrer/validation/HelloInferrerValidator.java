/**
 * generated by Xtext
 */
package org.xtext.example.helloinferrer.validation;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmIdentifiableElement;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.util.Primitives;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.ValidationMessageAcceptor;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XExpression;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.validation.IssueCodes;
import org.xtext.example.helloinferrer.helloInferrer.Operation;
import org.xtext.example.helloinferrer.validation.AbstractHelloInferrerValidator;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@SuppressWarnings("all")
public class HelloInferrerValidator extends AbstractHelloInferrerValidator {
  @Inject
  private Primitives primitives;
  
  public void checkAssignment(final XAssignment assignment) {
    final JvmIdentifiableElement assignmentFeature = assignment.getFeature();
    if ((assignmentFeature instanceof JvmFormalParameter)) {
      final EObject container = assignmentFeature.eContainer();
      boolean _and = false;
      if (!(container instanceof Operation)) {
        _and = false;
      } else {
        JvmFormalParameter _output = ((Operation) container).getOutput();
        boolean _equals = Objects.equal(_output, assignmentFeature);
        _and = ((container instanceof Operation) && _equals);
      }
      if (_and) {
        return;
      }
    }
    super.checkAssignment(assignment);
  }
  
  public boolean isImplicitReturn(final XExpression expr) {
    return false;
  }
  
  public void checkReturn(final XReturnExpression expr) {
    this.error("Explicit return not available in this language.", expr, null, 
      ValidationMessageAcceptor.INSIGNIFICANT_INDEX, 
      IssueCodes.INVALID_RETURN);
  }
  
  @Check
  public void checkOperation(final Operation operation) {
    boolean _and = false;
    JvmFormalParameter _output = operation.getOutput();
    boolean _notEquals = (!Objects.equal(_output, null));
    if (!_notEquals) {
      _and = false;
    } else {
      JvmFormalParameter _output_1 = operation.getOutput();
      JvmTypeReference _parameterType = _output_1.getParameterType();
      boolean _notEquals_1 = (!Objects.equal(_parameterType, null));
      _and = (_notEquals && _notEquals_1);
    }
    if (_and) {
      JvmFormalParameter _output_2 = operation.getOutput();
      JvmTypeReference _parameterType_1 = _output_2.getParameterType();
      boolean _isPrimitive = this.primitives.isPrimitive(_parameterType_1);
      if (_isPrimitive) {
        JvmFormalParameter _output_3 = operation.getOutput();
        JvmTypeReference _parameterType_2 = _output_3.getParameterType();
        this.error("Primitive types cannot be used as output parameters.", _parameterType_2, null, 
          IssueCodes.INVALID_USE_OF_TYPE);
      }
    }
  }
}
