/*
 * generated by Xtext
 */
package org.xtext.example.helloinferrer.validation

import com.google.inject.Inject
import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.xbase.XAssignment
import org.eclipse.xtext.common.types.util.Primitives
import org.eclipse.xtext.common.types.JvmFormalParameter
import org.xtext.example.helloinferrer.helloInferrer.Operation
import org.eclipse.xtext.xbase.XExpression
import org.eclipse.xtext.xbase.XReturnExpression
import org.eclipse.xtext.validation.ValidationMessageAcceptor
import org.eclipse.xtext.xbase.validation.IssueCodes

//import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class HelloInferrerValidator extends AbstractHelloInferrerValidator {

	@Inject Primitives primitives;

	override void checkAssignment(XAssignment assignment) {
		val assignmentFeature = assignment.getFeature();
		if (assignmentFeature instanceof JvmFormalParameter) {
			val container = assignmentFeature.eContainer();
			// it is OK to assign to an Operation's output parameter
			if (container instanceof Operation
					&& (container as Operation).getOutput() == assignmentFeature) {
				return;
			}
		}
		super.checkAssignment(assignment);
	}

	override boolean isImplicitReturn(XExpression expr) {
		// we will deal with this during generation
		return false;
	}

	override void checkReturn(XReturnExpression expr) {
		error("Explicit return not available in this language.", expr, null,
				ValidationMessageAcceptor.INSIGNIFICANT_INDEX, 
				IssueCodes.INVALID_RETURN);
	}

	@Check def void checkOperation(Operation operation) {
		if (operation.getOutput() != null
				&& operation.getOutput().getParameterType() != null) {
			if (primitives
					.isPrimitive(operation.getOutput().getParameterType())) {
				error("Primitive types cannot be used as output parameters.",
						operation.getOutput().getParameterType(), null,
						IssueCodes.INVALID_USE_OF_TYPE);
			}
		}
	}
}
